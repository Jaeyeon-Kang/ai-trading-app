version: '3.8'

services:
  # Redis (메시지 버스)
  redis:
    image: redis:7-alpine
    container_name: trading_bot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL (데이터베이스)
  postgres:
    image: postgres:15-alpine
    container_name: trading_bot_postgres
    environment:
      POSTGRES_DB: trading_bot
      POSTGRES_USER: trading_bot_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-trading_bot_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./app/db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_bot_user -d trading_bot"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Trading Bot API
  trading_bot_api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trading_bot_api
    environment:
      - DATABASE_URL=postgresql://trading_bot_user:${POSTGRES_PASSWORD:-trading_bot_password}@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
      - BROKER=${BROKER:-kis}
      - AUTO_MODE=${AUTO_MODE:-0}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_MONTHLY_CAP_KRW=${LLM_MONTHLY_CAP_KRW:-80000}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_CHANNEL=${SLACK_CHANNEL:-#trading-signals}
      - INITIAL_CAPITAL=${INITIAL_CAPITAL:-1000000}
      - DAILY_LOSS_LIMIT=${DAILY_LOSS_LIMIT:-0.03}
      - WATCHLIST=${WATCHLIST:-AAPL,MSFT,GOOGL,AMZN,TSLA}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trading_bot_worker
    command: celery -A app.jobs.scheduler worker --loglevel=info --concurrency=2
    environment:
      - DATABASE_URL=postgresql://trading_bot_user:${POSTGRES_PASSWORD:-trading_bot_password}@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
      - BROKER=${BROKER:-kis}
      - AUTO_MODE=${AUTO_MODE:-0}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_MONTHLY_CAP_KRW=${LLM_MONTHLY_CAP_KRW:-80000}
      - INITIAL_CAPITAL=${INITIAL_CAPITAL:-1000000}
      - DAILY_LOSS_LIMIT=${DAILY_LOSS_LIMIT:-0.03}
      - WATCHLIST=${WATCHLIST:-AAPL,MSFT,GOOGL,AMZN,TSLA}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Celery Beat (스케줄러)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trading_bot_scheduler
    command: celery -A app.jobs.scheduler beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://trading_bot_user:${POSTGRES_PASSWORD:-trading_bot_password}@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
      - BROKER=${BROKER:-kis}
      - AUTO_MODE=${AUTO_MODE:-0}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_MONTHLY_CAP_KRW=${LLM_MONTHLY_CAP_KRW:-80000}
      - INITIAL_CAPITAL=${INITIAL_CAPITAL:-1000000}
      - DAILY_LOSS_LIMIT=${DAILY_LOSS_LIMIT:-0.03}
      - WATCHLIST=${WATCHLIST:-AAPL,MSFT,GOOGL,AMZN,TSLA}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Grafana (모니터링 대시보드)
  grafana:
    image: grafana/grafana:latest
    container_name: trading_bot_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  # Prometheus (메트릭 수집)
  prometheus:
    image: prom/prometheus:latest
    container_name: trading_bot_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Nginx (리버스 프록시)
  nginx:
    image: nginx:alpine
    container_name: trading_bot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - trading_bot_api
    restart: unless-stopped

  # Redis Commander (Redis 관리 UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: trading_bot_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped

  # pgAdmin (PostgreSQL 관리 UI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: trading_bot_pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@tradingbot.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  default:
    name: trading_bot_network
    driver: bridge
