version: '3.8'

services:
  # Redis (메시지 버스)
  redis:
    image: redis:7-alpine
    container_name: trading_bot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL (데이터베이스)
  postgres:
    image: postgres:15-alpine
    container_name: trading_bot_postgres
    environment:
      POSTGRES_DB: trading_bot
      POSTGRES_USER: trading_bot_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-trading_bot_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./app/db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_bot_user -d trading_bot"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Trading Bot API
  trading_bot_api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trading_bot_api
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://trading_bot_user:${POSTGRES_PASSWORD:-trading_bot_password}@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
      - BROKER=${BROKER:-alpaca_paper}
      - AUTO_MODE=${AUTO_MODE:-0}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_MONTHLY_CAP_KRW=${LLM_MONTHLY_CAP_KRW:-80000}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_CHANNEL_ID=${SLACK_CHANNEL_ID}
      - INITIAL_CAPITAL=${INITIAL_CAPITAL:-1000000}
      - DAILY_LOSS_LIMIT=${DAILY_LOSS_LIMIT:-0.03}
      - WATCHLIST=${WATCHLIST:-AAPL,MSFT,GOOGL,AMZN,TSLA}
      # Tier System & API Limiting
      - TIER_A_TICKERS=${TIER_A_TICKERS:-NVDA,TSLA,AAPL}
      - TIER_B_TICKERS=${TIER_B_TICKERS:-MSFT,AMZN,META}
      - BENCH_TICKERS=${BENCH_TICKERS:-GOOGL,AMD,AVGO}
      - TIER_A_INTERVAL_SEC=${TIER_A_INTERVAL_SEC:-30}
      - TIER_B_INTERVAL_SEC=${TIER_B_INTERVAL_SEC:-60}
      - API_CALLS_PER_MINUTE=${API_CALLS_PER_MINUTE:-10}
      - API_TIER_A_ALLOCATION=${API_TIER_A_ALLOCATION:-6}
      - API_TIER_B_ALLOCATION=${API_TIER_B_ALLOCATION:-3}
      - API_RESERVE_ALLOCATION=${API_RESERVE_ALLOCATION:-1}
      - LLM_DAILY_CALL_LIMIT=${LLM_DAILY_CALL_LIMIT:-120}
      - LLM_CALL_COST_KRW=${LLM_CALL_COST_KRW:-667}
      - LLM_GATING_ENABLED=${LLM_GATING_ENABLED:-true}
      - LLM_MIN_SIGNAL_SCORE=${LLM_MIN_SIGNAL_SCORE:-0.7}
      - LLM_CACHE_DURATION_MIN=${LLM_CACHE_DURATION_MIN:-30}
      - MIXER_THRESHOLD=${MIXER_THRESHOLD:-0.15}
      - SIGNAL_CUTOFF_RTH=${SIGNAL_CUTOFF_RTH:-0.12}
      - MIN_HOLD_SEC=${MIN_HOLD_SEC:-60}
      - TRAIL_R_RATIO=${TRAIL_R_RATIO:-0.7}
      - VOLUME_SPIKE_MULTIPLIER=${VOLUME_SPIKE_MULTIPLIER:-1.5}
      - CANDLE_BREAK_EPSILON=${CANDLE_BREAK_EPSILON:-0.01}
      - POSITION_CAP_ENABLED=${POSITION_CAP_ENABLED:-true}
      - POSITION_MAX_EQUITY_PCT=${POSITION_MAX_EQUITY_PCT:-0.8}
      - POSITION_MIN_SLOTS=${POSITION_MIN_SLOTS:-3}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./app:/app/app  # 코드 실시간 마운트 (개발 편의)
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trading_bot_worker
    command: celery -A app.jobs.scheduler worker --loglevel=info --concurrency=1 --prefetch-multiplier=1 --max-tasks-per-child=200
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://trading_bot_user:${POSTGRES_PASSWORD:-trading_bot_password}@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
      - BROKER=${BROKER:-alpaca_paper}
      - AUTO_MODE=${AUTO_MODE:-0}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_MONTHLY_CAP_KRW=${LLM_MONTHLY_CAP_KRW:-80000}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_CHANNEL_ID=${SLACK_CHANNEL_ID}
      - INITIAL_CAPITAL=${INITIAL_CAPITAL:-1000000}
      - DAILY_LOSS_LIMIT=${DAILY_LOSS_LIMIT:-0.03}
      - WATCHLIST=${WATCHLIST:-AAPL,MSFT,GOOGL,AMZN,TSLA}
      # Tier System & API Limiting
      - TIER_A_TICKERS=${TIER_A_TICKERS:-NVDA,TSLA,AAPL}
      - TIER_B_TICKERS=${TIER_B_TICKERS:-MSFT,AMZN,META}
      - BENCH_TICKERS=${BENCH_TICKERS:-GOOGL,AMD,AVGO}
      - TIER_A_INTERVAL_SEC=${TIER_A_INTERVAL_SEC:-30}
      - TIER_B_INTERVAL_SEC=${TIER_B_INTERVAL_SEC:-60}
      - API_CALLS_PER_MINUTE=${API_CALLS_PER_MINUTE:-10}
      - API_TIER_A_ALLOCATION=${API_TIER_A_ALLOCATION:-6}
      - API_TIER_B_ALLOCATION=${API_TIER_B_ALLOCATION:-3}
      - API_RESERVE_ALLOCATION=${API_RESERVE_ALLOCATION:-1}
      - LLM_DAILY_CALL_LIMIT=${LLM_DAILY_CALL_LIMIT:-120}
      - LLM_CALL_COST_KRW=${LLM_CALL_COST_KRW:-667}
      - LLM_GATING_ENABLED=${LLM_GATING_ENABLED:-true}
      - LLM_MIN_SIGNAL_SCORE=${LLM_MIN_SIGNAL_SCORE:-0.7}
      - LLM_CACHE_DURATION_MIN=${LLM_CACHE_DURATION_MIN:-30}
      - MIXER_THRESHOLD=${MIXER_THRESHOLD:-0.15}
      - SIGNAL_CUTOFF_RTH=${SIGNAL_CUTOFF_RTH:-0.12}
      - MIN_HOLD_SEC=${MIN_HOLD_SEC:-60}
      - TRAIL_R_RATIO=${TRAIL_R_RATIO:-0.7}
      - VOLUME_SPIKE_MULTIPLIER=${VOLUME_SPIKE_MULTIPLIER:-1.5}
      - CANDLE_BREAK_EPSILON=${CANDLE_BREAK_EPSILON:-0.01}
      - POSITION_CAP_ENABLED=${POSITION_CAP_ENABLED:-true}
      - POSITION_MAX_EQUITY_PCT=${POSITION_MAX_EQUITY_PCT:-0.8}
      - POSITION_MIN_SLOTS=${POSITION_MIN_SLOTS:-3}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./app:/app/app  # 코드 실시간 마운트 (개발 편의)
      - ./logs:/app/logs

  # Celery Beat (스케줄러)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trading_bot_scheduler
    command: celery -A app.jobs.scheduler beat --loglevel=info
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://trading_bot_user:${POSTGRES_PASSWORD:-trading_bot_password}@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
      - BROKER=${BROKER:-alpaca_paper}
      - AUTO_MODE=${AUTO_MODE:-0}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_MONTHLY_CAP_KRW=${LLM_MONTHLY_CAP_KRW:-80000}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_CHANNEL_ID=${SLACK_CHANNEL_ID}
      - INITIAL_CAPITAL=${INITIAL_CAPITAL:-1000000}
      - DAILY_LOSS_LIMIT=${DAILY_LOSS_LIMIT:-0.03}
      - WATCHLIST=${WATCHLIST:-AAPL,MSFT,GOOGL,AMZN,TSLA}
      # Tier System & API Limiting
      - TIER_A_TICKERS=${TIER_A_TICKERS:-NVDA,TSLA,AAPL}
      - TIER_B_TICKERS=${TIER_B_TICKERS:-MSFT,AMZN,META}
      - BENCH_TICKERS=${BENCH_TICKERS:-GOOGL,AMD,AVGO}
      - TIER_A_INTERVAL_SEC=${TIER_A_INTERVAL_SEC:-30}
      - TIER_B_INTERVAL_SEC=${TIER_B_INTERVAL_SEC:-60}
      - API_CALLS_PER_MINUTE=${API_CALLS_PER_MINUTE:-10}
      - API_TIER_A_ALLOCATION=${API_TIER_A_ALLOCATION:-6}
      - API_TIER_B_ALLOCATION=${API_TIER_B_ALLOCATION:-3}
      - API_RESERVE_ALLOCATION=${API_RESERVE_ALLOCATION:-1}
      - LLM_DAILY_CALL_LIMIT=${LLM_DAILY_CALL_LIMIT:-120}
      - LLM_CALL_COST_KRW=${LLM_CALL_COST_KRW:-667}
      - LLM_GATING_ENABLED=${LLM_GATING_ENABLED:-true}
      - LLM_MIN_SIGNAL_SCORE=${LLM_MIN_SIGNAL_SCORE:-0.7}
      - LLM_CACHE_DURATION_MIN=${LLM_CACHE_DURATION_MIN:-30}
      - MIXER_THRESHOLD=${MIXER_THRESHOLD:-0.15}
      - SIGNAL_CUTOFF_RTH=${SIGNAL_CUTOFF_RTH:-0.12}
      - MIN_HOLD_SEC=${MIN_HOLD_SEC:-60}
      - TRAIL_R_RATIO=${TRAIL_R_RATIO:-0.7}
      - VOLUME_SPIKE_MULTIPLIER=${VOLUME_SPIKE_MULTIPLIER:-1.5}
      - CANDLE_BREAK_EPSILON=${CANDLE_BREAK_EPSILON:-0.01}
      - POSITION_CAP_ENABLED=${POSITION_CAP_ENABLED:-true}
      - POSITION_MAX_EQUITY_PCT=${POSITION_MAX_EQUITY_PCT:-0.8}
      - POSITION_MIN_SLOTS=${POSITION_MIN_SLOTS:-3}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./app:/app/app  # 코드 실시간 마운트 (개발 편의)
      - ./logs:/app/logs

  # Grafana (모니터링 대시보드)
  grafana:
    profiles: ["monitoring"]
    image: grafana/grafana:latest
    container_name: trading_bot_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  # Prometheus (메트릭 수집)
  prometheus:
    profiles: ["monitoring"]
    image: prom/prometheus:latest
    container_name: trading_bot_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Nginx (리버스 프록시)
  nginx:
    profiles: ["monitoring"]
    image: nginx:alpine
    container_name: trading_bot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - trading_bot_api
    restart: unless-stopped

  # Redis Commander (Redis 관리 UI)
  redis-commander:
    profiles: ["monitoring"]
    image: rediscommander/redis-commander:latest
    container_name: trading_bot_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped

  # pgAdmin (PostgreSQL 관리 UI)
  pgadmin:
    profiles: ["monitoring"]
    image: dpage/pgadmin4:latest
    container_name: trading_bot_pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@tradingbot.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  default:
    name: trading_bot_network
    driver: bridge
